// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ShowService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class ShowServiceHandler : virtual public ShowServiceIf {
 public:
  ShowServiceHandler() {
    // Your initialization goes here
  }

  int32_t addCueWithNumber(const double number, const std::string& name) {
    // Your implementation goes here
    printf("addCueWithNumber\n");
  }

  int32_t addCueAtLocation(const int32_t location, const std::string& name) {
    // Your implementation goes here
    printf("addCueAtLocation\n");
  }

  void getCues(std::vector<CueData> & _return) {
    // Your implementation goes here
    printf("getCues\n");
  }

  void getCue(CueData& _return, const int32_t id) {
    // Your implementation goes here
    printf("getCue\n");
  }

  void deleteCue(const int32_t id) {
    // Your implementation goes here
    printf("deleteCue\n");
  }

  void changeNumber(const int32_t id, const double number) {
    // Your implementation goes here
    printf("changeNumber\n");
  }

  void changeName(const int32_t id, const std::string& name) {
    // Your implementation goes here
    printf("changeName\n");
  }

  void newShow() {
    // Your implementation goes here
    printf("newShow\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ShowServiceHandler> handler(new ShowServiceHandler());
  shared_ptr<TProcessor> processor(new ShowServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}


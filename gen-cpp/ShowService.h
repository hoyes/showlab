/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ShowService_H
#define ShowService_H

#include <TProcessor.h>
#include "interface_types.h"



class ShowServiceIf {
 public:
  virtual ~ShowServiceIf() {}
  virtual int32_t addCueWithNumber(const double number, const std::string& name) = 0;
  virtual int32_t addCueAtLocation(const int32_t location, const std::string& name) = 0;
  virtual void getCues(std::vector<CueData> & _return) = 0;
  virtual void getCue(CueData& _return, const int32_t id) = 0;
  virtual void deleteCue(const int32_t id) = 0;
  virtual void changeNumber(const int32_t id, const double number) = 0;
  virtual void changeName(const int32_t id, const std::string& name) = 0;
  virtual void newShow() = 0;
};

class ShowServiceIfFactory {
 public:
  typedef ShowServiceIf Handler;

  virtual ~ShowServiceIfFactory() {}

  virtual ShowServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ShowServiceIf* /* handler */) = 0;
};

class ShowServiceIfSingletonFactory : virtual public ShowServiceIfFactory {
 public:
  ShowServiceIfSingletonFactory(const boost::shared_ptr<ShowServiceIf>& iface) : iface_(iface) {}
  virtual ~ShowServiceIfSingletonFactory() {}

  virtual ShowServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ShowServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ShowServiceIf> iface_;
};

class ShowServiceNull : virtual public ShowServiceIf {
 public:
  virtual ~ShowServiceNull() {}
  int32_t addCueWithNumber(const double /* number */, const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t addCueAtLocation(const int32_t /* location */, const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  void getCues(std::vector<CueData> & /* _return */) {
    return;
  }
  void getCue(CueData& /* _return */, const int32_t /* id */) {
    return;
  }
  void deleteCue(const int32_t /* id */) {
    return;
  }
  void changeNumber(const int32_t /* id */, const double /* number */) {
    return;
  }
  void changeName(const int32_t /* id */, const std::string& /* name */) {
    return;
  }
  void newShow() {
    return;
  }
};

typedef struct _ShowService_addCueWithNumber_args__isset {
  _ShowService_addCueWithNumber_args__isset() : number(false), name(false) {}
  bool number;
  bool name;
} _ShowService_addCueWithNumber_args__isset;

class ShowService_addCueWithNumber_args {
 public:

  ShowService_addCueWithNumber_args() : number(0), name("") {
  }

  virtual ~ShowService_addCueWithNumber_args() throw() {}

  double number;
  std::string name;

  _ShowService_addCueWithNumber_args__isset __isset;

  void __set_number(const double val) {
    number = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ShowService_addCueWithNumber_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ShowService_addCueWithNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_addCueWithNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_addCueWithNumber_pargs {
 public:


  virtual ~ShowService_addCueWithNumber_pargs() throw() {}

  const double* number;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_addCueWithNumber_result__isset {
  _ShowService_addCueWithNumber_result__isset() : success(false) {}
  bool success;
} _ShowService_addCueWithNumber_result__isset;

class ShowService_addCueWithNumber_result {
 public:

  ShowService_addCueWithNumber_result() : success(0) {
  }

  virtual ~ShowService_addCueWithNumber_result() throw() {}

  int32_t success;

  _ShowService_addCueWithNumber_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ShowService_addCueWithNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShowService_addCueWithNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_addCueWithNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_addCueWithNumber_presult__isset {
  _ShowService_addCueWithNumber_presult__isset() : success(false) {}
  bool success;
} _ShowService_addCueWithNumber_presult__isset;

class ShowService_addCueWithNumber_presult {
 public:


  virtual ~ShowService_addCueWithNumber_presult() throw() {}

  int32_t* success;

  _ShowService_addCueWithNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShowService_addCueAtLocation_args__isset {
  _ShowService_addCueAtLocation_args__isset() : location(false), name(false) {}
  bool location;
  bool name;
} _ShowService_addCueAtLocation_args__isset;

class ShowService_addCueAtLocation_args {
 public:

  ShowService_addCueAtLocation_args() : location(0), name("") {
  }

  virtual ~ShowService_addCueAtLocation_args() throw() {}

  int32_t location;
  std::string name;

  _ShowService_addCueAtLocation_args__isset __isset;

  void __set_location(const int32_t val) {
    location = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ShowService_addCueAtLocation_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ShowService_addCueAtLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_addCueAtLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_addCueAtLocation_pargs {
 public:


  virtual ~ShowService_addCueAtLocation_pargs() throw() {}

  const int32_t* location;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_addCueAtLocation_result__isset {
  _ShowService_addCueAtLocation_result__isset() : success(false) {}
  bool success;
} _ShowService_addCueAtLocation_result__isset;

class ShowService_addCueAtLocation_result {
 public:

  ShowService_addCueAtLocation_result() : success(0) {
  }

  virtual ~ShowService_addCueAtLocation_result() throw() {}

  int32_t success;

  _ShowService_addCueAtLocation_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ShowService_addCueAtLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShowService_addCueAtLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_addCueAtLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_addCueAtLocation_presult__isset {
  _ShowService_addCueAtLocation_presult__isset() : success(false) {}
  bool success;
} _ShowService_addCueAtLocation_presult__isset;

class ShowService_addCueAtLocation_presult {
 public:


  virtual ~ShowService_addCueAtLocation_presult() throw() {}

  int32_t* success;

  _ShowService_addCueAtLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ShowService_getCues_args {
 public:

  ShowService_getCues_args() {
  }

  virtual ~ShowService_getCues_args() throw() {}


  bool operator == (const ShowService_getCues_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_getCues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_getCues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_getCues_pargs {
 public:


  virtual ~ShowService_getCues_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_getCues_result__isset {
  _ShowService_getCues_result__isset() : success(false) {}
  bool success;
} _ShowService_getCues_result__isset;

class ShowService_getCues_result {
 public:

  ShowService_getCues_result() {
  }

  virtual ~ShowService_getCues_result() throw() {}

  std::vector<CueData>  success;

  _ShowService_getCues_result__isset __isset;

  void __set_success(const std::vector<CueData> & val) {
    success = val;
  }

  bool operator == (const ShowService_getCues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShowService_getCues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_getCues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_getCues_presult__isset {
  _ShowService_getCues_presult__isset() : success(false) {}
  bool success;
} _ShowService_getCues_presult__isset;

class ShowService_getCues_presult {
 public:


  virtual ~ShowService_getCues_presult() throw() {}

  std::vector<CueData> * success;

  _ShowService_getCues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShowService_getCue_args__isset {
  _ShowService_getCue_args__isset() : id(false) {}
  bool id;
} _ShowService_getCue_args__isset;

class ShowService_getCue_args {
 public:

  ShowService_getCue_args() : id(0) {
  }

  virtual ~ShowService_getCue_args() throw() {}

  int32_t id;

  _ShowService_getCue_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const ShowService_getCue_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ShowService_getCue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_getCue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_getCue_pargs {
 public:


  virtual ~ShowService_getCue_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_getCue_result__isset {
  _ShowService_getCue_result__isset() : success(false) {}
  bool success;
} _ShowService_getCue_result__isset;

class ShowService_getCue_result {
 public:

  ShowService_getCue_result() {
  }

  virtual ~ShowService_getCue_result() throw() {}

  CueData success;

  _ShowService_getCue_result__isset __isset;

  void __set_success(const CueData& val) {
    success = val;
  }

  bool operator == (const ShowService_getCue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShowService_getCue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_getCue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShowService_getCue_presult__isset {
  _ShowService_getCue_presult__isset() : success(false) {}
  bool success;
} _ShowService_getCue_presult__isset;

class ShowService_getCue_presult {
 public:


  virtual ~ShowService_getCue_presult() throw() {}

  CueData* success;

  _ShowService_getCue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShowService_deleteCue_args__isset {
  _ShowService_deleteCue_args__isset() : id(false) {}
  bool id;
} _ShowService_deleteCue_args__isset;

class ShowService_deleteCue_args {
 public:

  ShowService_deleteCue_args() : id(0) {
  }

  virtual ~ShowService_deleteCue_args() throw() {}

  int32_t id;

  _ShowService_deleteCue_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const ShowService_deleteCue_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ShowService_deleteCue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_deleteCue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_deleteCue_pargs {
 public:


  virtual ~ShowService_deleteCue_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_deleteCue_result {
 public:

  ShowService_deleteCue_result() {
  }

  virtual ~ShowService_deleteCue_result() throw() {}


  bool operator == (const ShowService_deleteCue_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_deleteCue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_deleteCue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_deleteCue_presult {
 public:


  virtual ~ShowService_deleteCue_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShowService_changeNumber_args__isset {
  _ShowService_changeNumber_args__isset() : id(false), number(false) {}
  bool id;
  bool number;
} _ShowService_changeNumber_args__isset;

class ShowService_changeNumber_args {
 public:

  ShowService_changeNumber_args() : id(0), number(0) {
  }

  virtual ~ShowService_changeNumber_args() throw() {}

  int32_t id;
  double number;

  _ShowService_changeNumber_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_number(const double val) {
    number = val;
  }

  bool operator == (const ShowService_changeNumber_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const ShowService_changeNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_changeNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeNumber_pargs {
 public:


  virtual ~ShowService_changeNumber_pargs() throw() {}

  const int32_t* id;
  const double* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeNumber_result {
 public:

  ShowService_changeNumber_result() {
  }

  virtual ~ShowService_changeNumber_result() throw() {}


  bool operator == (const ShowService_changeNumber_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_changeNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_changeNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeNumber_presult {
 public:


  virtual ~ShowService_changeNumber_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShowService_changeName_args__isset {
  _ShowService_changeName_args__isset() : id(false), name(false) {}
  bool id;
  bool name;
} _ShowService_changeName_args__isset;

class ShowService_changeName_args {
 public:

  ShowService_changeName_args() : id(0), name("") {
  }

  virtual ~ShowService_changeName_args() throw() {}

  int32_t id;
  std::string name;

  _ShowService_changeName_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ShowService_changeName_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ShowService_changeName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_changeName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeName_pargs {
 public:


  virtual ~ShowService_changeName_pargs() throw() {}

  const int32_t* id;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeName_result {
 public:

  ShowService_changeName_result() {
  }

  virtual ~ShowService_changeName_result() throw() {}


  bool operator == (const ShowService_changeName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_changeName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_changeName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_changeName_presult {
 public:


  virtual ~ShowService_changeName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ShowService_newShow_args {
 public:

  ShowService_newShow_args() {
  }

  virtual ~ShowService_newShow_args() throw() {}


  bool operator == (const ShowService_newShow_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_newShow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_newShow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_newShow_pargs {
 public:


  virtual ~ShowService_newShow_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_newShow_result {
 public:

  ShowService_newShow_result() {
  }

  virtual ~ShowService_newShow_result() throw() {}


  bool operator == (const ShowService_newShow_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowService_newShow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowService_newShow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShowService_newShow_presult {
 public:


  virtual ~ShowService_newShow_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ShowServiceClient : virtual public ShowServiceIf {
 public:
  ShowServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ShowServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t addCueWithNumber(const double number, const std::string& name);
  void send_addCueWithNumber(const double number, const std::string& name);
  int32_t recv_addCueWithNumber();
  int32_t addCueAtLocation(const int32_t location, const std::string& name);
  void send_addCueAtLocation(const int32_t location, const std::string& name);
  int32_t recv_addCueAtLocation();
  void getCues(std::vector<CueData> & _return);
  void send_getCues();
  void recv_getCues(std::vector<CueData> & _return);
  void getCue(CueData& _return, const int32_t id);
  void send_getCue(const int32_t id);
  void recv_getCue(CueData& _return);
  void deleteCue(const int32_t id);
  void send_deleteCue(const int32_t id);
  void recv_deleteCue();
  void changeNumber(const int32_t id, const double number);
  void send_changeNumber(const int32_t id, const double number);
  void recv_changeNumber();
  void changeName(const int32_t id, const std::string& name);
  void send_changeName(const int32_t id, const std::string& name);
  void recv_changeName();
  void newShow();
  void send_newShow();
  void recv_newShow();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ShowServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ShowServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ShowServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_addCueWithNumber(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCueAtLocation(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCues(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCue(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteCue(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeNumber(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newShow(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ShowServiceProcessor(boost::shared_ptr<ShowServiceIf> iface) :
    iface_(iface) {
    processMap_["addCueWithNumber"] = &ShowServiceProcessor::process_addCueWithNumber;
    processMap_["addCueAtLocation"] = &ShowServiceProcessor::process_addCueAtLocation;
    processMap_["getCues"] = &ShowServiceProcessor::process_getCues;
    processMap_["getCue"] = &ShowServiceProcessor::process_getCue;
    processMap_["deleteCue"] = &ShowServiceProcessor::process_deleteCue;
    processMap_["changeNumber"] = &ShowServiceProcessor::process_changeNumber;
    processMap_["changeName"] = &ShowServiceProcessor::process_changeName;
    processMap_["newShow"] = &ShowServiceProcessor::process_newShow;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ShowServiceProcessor() {}
};

class ShowServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ShowServiceProcessorFactory(const ::boost::shared_ptr< ShowServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ShowServiceIfFactory > handlerFactory_;
};

class ShowServiceMultiface : virtual public ShowServiceIf {
 public:
  ShowServiceMultiface(std::vector<boost::shared_ptr<ShowServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ShowServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ShowServiceIf> > ifaces_;
  ShowServiceMultiface() {}
  void add(boost::shared_ptr<ShowServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t addCueWithNumber(const double number, const std::string& name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->addCueWithNumber(number, name);
      } else {
        ifaces_[i]->addCueWithNumber(number, name);
      }
    }
  }

  int32_t addCueAtLocation(const int32_t location, const std::string& name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->addCueAtLocation(location, name);
      } else {
        ifaces_[i]->addCueAtLocation(location, name);
      }
    }
  }

  void getCues(std::vector<CueData> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCues(_return);
        return;
      } else {
        ifaces_[i]->getCues(_return);
      }
    }
  }

  void getCue(CueData& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCue(_return, id);
        return;
      } else {
        ifaces_[i]->getCue(_return, id);
      }
    }
  }

  void deleteCue(const int32_t id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->deleteCue(id);
    }
  }

  void changeNumber(const int32_t id, const double number) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->changeNumber(id, number);
    }
  }

  void changeName(const int32_t id, const std::string& name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->changeName(id, name);
    }
  }

  void newShow() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->newShow();
    }
  }

};



#endif

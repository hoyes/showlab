/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef interface_TYPES_H
#define interface_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _CueData__isset {
  _CueData__isset() : number(false), name(false) {}
  bool number;
  bool name;
} _CueData__isset;

class CueData {
 public:

  static const char* ascii_fingerprint; // = "DD2684E5F49042C4C07B5348ECFFFD06";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x26,0x84,0xE5,0xF4,0x90,0x42,0xC4,0xC0,0x7B,0x53,0x48,0xEC,0xFF,0xFD,0x06};

  CueData() : number(0), name("") {
  }

  virtual ~CueData() throw() {}

  double number;
  std::string name;

  _CueData__isset __isset;

  void __set_number(const double val) {
    number = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const CueData & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const CueData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CueData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif

/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef interface_TYPES_H
#define interface_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _CueData__isset {
  _CueData__isset() : uid(false), number(false), name(false) {}
  bool uid;
  bool number;
  bool name;
} _CueData__isset;

class CueData {
 public:

  static const char* ascii_fingerprint; // = "E0B9A2019B35873F5E3903C86979C4DE";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xB9,0xA2,0x01,0x9B,0x35,0x87,0x3F,0x5E,0x39,0x03,0xC8,0x69,0x79,0xC4,0xDE};

  CueData() : uid(""), number(0), name("") {
  }

  virtual ~CueData() throw() {}

  std::string uid;
  double number;
  std::string name;

  _CueData__isset __isset;

  void __set_uid(const std::string& val) {
    uid = val;
  }

  void __set_number(const double val) {
    number = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const CueData & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const CueData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CueData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif

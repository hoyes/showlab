#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ShowService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string addCueWithNumber(double number, string name)'
  print '  string addCueAtLocation(string location, string name)'
  print '   getCues()'
  print '  CueData getCue(string id)'
  print '  void deleteCue(i32 id)'
  print '  void changeNumber(i32 id, double number)'
  print '  void changeName(i32 id, string name)'
  print '  void addAudioActionById(string cueid, string filename)'
  print '  void addAudioActionByNumber(i32 num, string filename)'
  print '  void newShow()'
  print '  void reset()'
  print '  void go()'
  print '  void standbyUid(string id)'
  print '  void standbyNum(double number)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ShowService.Client(protocol)
transport.open()

if cmd == 'addCueWithNumber':
  if len(args) != 2:
    print 'addCueWithNumber requires 2 args'
    sys.exit(1)
  pp.pprint(client.addCueWithNumber(eval(args[0]),args[1],))

elif cmd == 'addCueAtLocation':
  if len(args) != 2:
    print 'addCueAtLocation requires 2 args'
    sys.exit(1)
  pp.pprint(client.addCueAtLocation(args[0],args[1],))

elif cmd == 'getCues':
  if len(args) != 0:
    print 'getCues requires 0 args'
    sys.exit(1)
  pp.pprint(client.getCues())

elif cmd == 'getCue':
  if len(args) != 1:
    print 'getCue requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCue(args[0],))

elif cmd == 'deleteCue':
  if len(args) != 1:
    print 'deleteCue requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteCue(eval(args[0]),))

elif cmd == 'changeNumber':
  if len(args) != 2:
    print 'changeNumber requires 2 args'
    sys.exit(1)
  pp.pprint(client.changeNumber(eval(args[0]),eval(args[1]),))

elif cmd == 'changeName':
  if len(args) != 2:
    print 'changeName requires 2 args'
    sys.exit(1)
  pp.pprint(client.changeName(eval(args[0]),args[1],))

elif cmd == 'addAudioActionById':
  if len(args) != 2:
    print 'addAudioActionById requires 2 args'
    sys.exit(1)
  pp.pprint(client.addAudioActionById(args[0],args[1],))

elif cmd == 'addAudioActionByNumber':
  if len(args) != 2:
    print 'addAudioActionByNumber requires 2 args'
    sys.exit(1)
  pp.pprint(client.addAudioActionByNumber(eval(args[0]),args[1],))

elif cmd == 'newShow':
  if len(args) != 0:
    print 'newShow requires 0 args'
    sys.exit(1)
  pp.pprint(client.newShow())

elif cmd == 'reset':
  if len(args) != 0:
    print 'reset requires 0 args'
    sys.exit(1)
  pp.pprint(client.reset())

elif cmd == 'go':
  if len(args) != 0:
    print 'go requires 0 args'
    sys.exit(1)
  pp.pprint(client.go())

elif cmd == 'standbyUid':
  if len(args) != 1:
    print 'standbyUid requires 1 args'
    sys.exit(1)
  pp.pprint(client.standbyUid(args[0],))

elif cmd == 'standbyNum':
  if len(args) != 1:
    print 'standbyNum requires 1 args'
    sys.exit(1)
  pp.pprint(client.standbyNum(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
